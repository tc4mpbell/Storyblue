<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Copyright (c) 2008, Thomas W. Gonzalez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

www.brightpointinc.com

*/	
-->
<microCharts:BaseMicroChart xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns="http://www.degrafa.com/2007" xmlns:microCharts="com.brightPoint.microCharts.*" >
<mx:Script>
	<![CDATA[
	
		import flash.utils.getDefinitionByName;
	
	
		private function calcHeight(iteration:Number, target:Object):Number {
			if (!chartData) return 0;
			return this.height*(Number(chartData[iteration])/(_max));
		}
		
		private function calcY(iteration:Number, target:Object):Number {
			if (!chartData) return 0;
			return this.height-this.height*((Number(chartData[iteration])/_max));
		}
		
		private function calcXOffset(iteration:Number, target:Object):Number {
			var strokeWeight:Number=0;
			if (myColumn.stroke) {
				strokeWeight=myColumn.stroke.weight;
			}
			return this.width/count+(this.width*.02/count)+strokeWeight*2;
		}
		
		override public function set dataProvider(value:Array):void {
			super.dataProvider=value;
			myRepeater.count=dataProvider.length;  //Somehow the binding is breaking on this in the MicroChartBase --> GeometryRepeater
		}
		
		override public function draw():void {
			//Note.. for some reasons the binding timing is not working correctly for these objects
			if (getStyle("useGhostFill") == true) {
				myColumn.fill=ghostFill;
				myColumn.stroke=ghostStroke;
			}
			else {
				myColumn.fill=myFill;
				myColumn.stroke=null;
			}
			
			if (_colorFill) myColumn.fill=_colorFill;
			if (_colorStroke) myColumn.stroke=_colorStroke;
			
			super.draw();
			myColumn.width=this.width/count-this.width*.02;
			myGroup.draw(this.graphics,null);
		}
		
	]]>
</mx:Script>
	<microCharts:graphicsData>
	<GeometryGroup id="myGroup" width="{this.width}">
		<geometry>
			<GeometryRepeater id="myRepeater" count="{count}">
				<RegularRectangle x="0" fill="{myFill}" id="myColumn"/>
				<modifiers>
					<PropertyModifier property="x" offset="{calcXOffset}"/>
					<PropertyModifier property="height" offset="{calcHeight}" offsetOperator="none"/>
					<PropertyModifier property="y" offset="{calcY}" offsetOperator="none"/>
				</modifiers>
			</GeometryRepeater>
		</geometry>
		<fills>
			<SolidFill id="myFill" color="{colorTheme}"/>
			<LinearGradientFill id="ghostFill" angle="45">
				<GradientStop color="{colorTheme}" alpha=".8" ratio="0"/>
				<GradientStop color="{colorTheme}" alpha=".3" ratio="1"/>
			</LinearGradientFill>
		</fills>
		<strokes>
			<LinearGradientStroke id="ghostStroke" angle="45" weight="1" pixelHinting="true">
				<GradientStop color="{colorTheme}" alpha=".9" ratio="0"/>
				<GradientStop color="{colorTheme}" alpha=".6" ratio="1"/>
			</LinearGradientStroke>
		</strokes>
	</GeometryGroup>

	</microCharts:graphicsData>
</microCharts:BaseMicroChart>
